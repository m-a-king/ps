function 어떤정렬의_중간과정인가(중간상태, 초기상태, 최종상태):
    if 퀵정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
        return "퀵정렬 진행 중"
    if 힙정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
        return "힙정렬 진행 중"
    if 선택정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
        return "선택정렬 진행 중"
    if 버블정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
        return "버블정렬 진행 중"
    if 삽입정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
        return "삽입정렬 진행 중"

    return "알 수 없는 정렬이거나 더욱 상세한 확인이 필요함"

function 퀵정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
    // O(1): 퀵정렬이 한 번만 진행된 경우 or O(N): 퀵 정렬이 두 번 이상 진행된 경우
    피봇 = 피봇찾기(중간상태, 초기상태)
    if 피봇위치 != 최종_피봇위치:
        return False
    if 피봇_기준으로_좌우로_나뉘어_있으며_값들의_교환이_확인됨(중간상태, 피봇): // O(n)
        return True
    return False

function 삽입정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
    정렬된_부분, 정렬안된_부분 = 정렬이_어디까지_되었는지_확인(중간상태, 초기상태) // O(n)
    if 정렬된_부분이_올바른지_확인(정렬된_부분) and 정렬안된_부분이_초기상태인지_확인(정렬안된_부분, 초기상태): // O(n)
        return True
    return False

function 힙정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
    if 최대힙구조인지_확인(중간상태) or 최대힙구조에서_스왑하며_힙에서_제외된_부분이_배열의_끝부터_정렬되는지_확인(중간상태, 최종상태): // O(n)
        return True
    return False

function 선택정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
    if 앞부분이_정렬되어_있는지_확인(중간상태): // O(n)
        if 정렬된_부분이_정확하게_최종상태와_같은지_비교(중간상태, 최종상태): // O(n)
            return True
    return False

function 버블정렬의_중간과정이라면(중간상태, 초기상태, 최종상태):  // O(n)
    if 마지막_요소부터_정렬되는지_확인(중간상태, 최종상태): // O(n)
        return True
    return False
